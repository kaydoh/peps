<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>Newest Python PEPs</title>
    <link>https://peps.python.org/peps.rss</link>
    <description>Newest Python Enhancement Proposals (PEPs) - Information on new language features, and some meta-information like release procedure and schedules.</description>
    <atom:link href="https://peps.python.org/peps.rss" rel="self"/>
    <docs>https://cyber.harvard.edu/rss/rss.html</docs>
    <language>en</language>
    <lastBuildDate>Mon, 09 Jan 2023 15:46:23 GMT</lastBuildDate>
    <item>
      <title>PEP 702: Marking deprecations using the type system</title>
      <link>https://peps.python.org/pep-0702/</link>
      <description>This PEP adds an @typing.deprecated() decorator that marks a class or function as deprecated, enabling static checkers to warn when it is used.</description>
      <author>Jelle Zijlstra (jelle.zijlstra@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0702/</guid>
      <pubDate>Fri, 30 Dec 2022 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 701: Syntactic formalization of f-strings</title>
      <link>https://peps.python.org/pep-0701/</link>
      <description>This document proposes to lift some of the restrictions originally formulated in PEP 498 and to provide a formalized grammar for f-strings that can be integrated into the parser directly. The proposed syntactic formalization of f-strings will have some small side-effects on how f-strings are parsed and interpreted, allowing for a considerable number of advantages for end users and library developers, while also dramatically reducing the maintenance cost of the code dedicated to parsing f-strings.</description>
      <author>Pablo Galindo (pablogsal@python.org)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0701/</guid>
      <pubDate>Tue, 15 Nov 2022 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 8104: 2023 Term Steering Council election</title>
      <link>https://peps.python.org/pep-8104/</link>
      <description>This document describes the schedule and other details of the December 2022 election for the Python steering council, as specified in PEP 13. This is the steering council election for the 2023 term (i.e. Python 3.12).</description>
      <author>Ee Durbin (ee@python.org)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-8104/</guid>
      <pubDate>Tue, 08 Nov 2022 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 700: Additional Fields for the Simple API for Package Indexes</title>
      <link>https://peps.python.org/pep-0700/</link>
      <description>PEP 691 defined a JSON form for the "Simple Repository API". This allowed clients to more easily query the data that was previously only available in HTML, as defined in PEP 503.</description>
      <author>Paul Moore (p.f.moore@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0700/</guid>
      <pubDate>Fri, 21 Oct 2022 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 699: Remove private dict version field added in PEP 509</title>
      <link>https://peps.python.org/pep-0699/</link>
      <description>PEP 509 introduced a private ma_version_tag field for dictionaries to allow optimizations in CPython and extension libraries. This PEP proposes to rescind PEP 509 and declare the field an implementation detail, as it has already been superseded by alternatives. This will further allow the field to be reused for future optimization.</description>
      <author>Ken Jin (kenjin@python.org)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0699/</guid>
      <pubDate>Mon, 03 Oct 2022 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 698: Override Decorator for Static Typing</title>
      <link>https://peps.python.org/pep-0698/</link>
      <description>This PEP proposes adding an @override decorator to the Python type system. This will allow type checkers to prevent a class of bugs that occur when a base class changes methods that are inherited by derived classes.</description>
      <author>Steven Troxler (steven.troxler@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0698/</guid>
      <pubDate>Mon, 05 Sep 2022 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 697: Limited C API for Extending Opaque Types</title>
      <link>https://peps.python.org/pep-0697/</link>
      <description>Add Limited C API for extending types with opaque data, by allowing code to only deal with data specific to a particular (sub)class.</description>
      <author>Petr Viktorin (encukou@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0697/</guid>
      <pubDate>Tue, 23 Aug 2022 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 696: Type defaults for TypeVarLikes</title>
      <link>https://peps.python.org/pep-0696/</link>
      <description>This PEP introduces the concept of type defaults for TypeVarLikes (TypeVar, ParamSpec and TypeVarTuple), which act as defaults for a type parameter when one is not specified or the constraint solver isn't able to solve a type parameter to anything.</description>
      <author>James Hilton-Balfe (gobot1234yt@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0696/</guid>
      <pubDate>Thu, 14 Jul 2022 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 695: Type Parameter Syntax</title>
      <link>https://peps.python.org/pep-0695/</link>
      <description>This PEP specifies an improved syntax for specifying type parameters within a generic class, function, or type alias. It also introduces a new statement for declaring type aliases.</description>
      <author>Eric Traut (erictr at microsoft.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0695/</guid>
      <pubDate>Wed, 15 Jun 2022 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 694: Upload 2.0 API for Python Package Repositories</title>
      <link>https://peps.python.org/pep-0694/</link>
      <description>There is currently no standardized API for uploading files to a Python package repository such as PyPI. Instead, everyone has been forced to reverse engineer the non-standard API from PyPI.</description>
      <author>Donald Stufft (donald@stufft.io)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0694/</guid>
      <pubDate>Sat, 11 Jun 2022 00:00:00 GMT</pubDate>
    </item>
  </channel>
</rss>
